#Installing Required Packages
#First, we install the necessary R packages:

install.packages(c("corrr", "ggplot2", "ggcorrplot", "FactoMineR", "usethis", 
                   "devtools", "factoextra", "ggfortify", "ggpubr", "caTools", 
                   "dplyr", "Matrix", "lattice", "minqa", "MuMIn", "DHARMa", 
                   "lme4", "readxl"))

#Loading Libraries
#Next, we load the required libraries:

library(corrr)
library(ggplot2)
library(ggcorrplot)
library(FactoMineR)
library(usethis)
library(devtools)
library(factoextra)
library(ggfortify)
library(ggpubr)
library(caTools)
library(dplyr)
library(Matrix)
library(lattice)
library(minqa)
library(MuMIn)
library(DHARMa)
library(lme4)
library(readxl)


#Performing PCA on Climatic Variables
#We prepare and perform PCA on the climatic variables:

klima <- read_excel("Worksheets/KLIMAVARIABLER.xlsx", sheet = 1)
summary(klima)

# Select desired columns for PCA
numerical_data <- klima[,2:30]

# Normalize the data
data_normalized <- scale(numerical_data)

# Check normalized data
head(data_normalized)

#Creating a Correlation Matrix
#We create a correlation matrix and visualize it:

# Calculate and plot the correlation matrix
corr_matrix <- cor(data_normalized)
ggcorrplot(corr_matrix)

# Print correlation values
correlation_value <- corr_matrix[,]
print(correlation_value)

# Visualizing PCA
#We perform and visualize PCA to understand the contribution of each variable:

# Perform PCA
data.pca <- princomp(data_normalized)

# Visualize eigenvalues
fviz_eig(data.pca, addlabels = TRUE)

# Biplot of PCA
fviz_pca_var(data.pca, col.var = "cos2", 
             gradient.cols = c("black", "orange", "green"), 
             repel = TRUE)

# Using Selected Variables for PCA
# We perform PCA using selected variables and visualize the results:

# Perform PCA on selected variables
klima.pca <- prcomp(numerical_data[,c(1:3)], center = TRUE, scale. = TRUE) 
summary(klima.pca)

# Visualize the PCA results
TA.plot <- autoplot(klima.pca, data = klima, colour = 'Column1',
                    loadings = TRUE, loadings.colour = 'blue4',
                    loadings.label = TRUE, loadings.label.size = 3.5)
TA.plot
